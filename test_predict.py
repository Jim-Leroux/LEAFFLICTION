#!/usr/bin/env python3
"""
test_predict.py - Script de test automatique pour predict.py
Usage: python test_predict.py <model.zip> <images_folder>
"""

import os
import sys
import json
import zipfile
import shutil
from pathlib import Path
import numpy as np
import tensorflow as tf
from tensorflow import keras
from PIL import Image
import time


def extract_model(zip_path):
    """Extrait le mod√®le du .zip"""
    extract_dir = Path("temp_model_test")
    
    if extract_dir.exists():
        shutil.rmtree(extract_dir)
    
    extract_dir.mkdir(exist_ok=True)
    
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    
    return extract_dir


def load_model_and_metadata(model_dir):
    """Charge le mod√®le et les m√©tadonn√©es"""
    model_path = model_dir / "model.h5"
    metadata_path = model_dir / "metadata.json"
    
    if not model_path.exists():
        raise FileNotFoundError(f"Mod√®le non trouv√©: {model_path}")
    
    if not metadata_path.exists():
        raise FileNotFoundError(f"M√©tadonn√©es non trouv√©es: {metadata_path}")
    
    model = keras.models.load_model(model_path)
    
    with open(metadata_path, 'r') as f:
        metadata = json.load(f)
    
    return model, metadata


def preprocess_image(img_path, img_size):
    """Pr√©traite l'image pour la pr√©diction"""
    img = Image.open(img_path).convert('RGB')
    img = img.resize(img_size)
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array


def predict_image(model, metadata, img_path):
    """Fait la pr√©diction sur une image"""
    img_size = tuple(metadata['img_size'])
    classes = metadata['classes']
    
    img_array = preprocess_image(img_path, img_size)
    
    predictions = model.predict(img_array, verbose=0)
    predicted_idx = np.argmax(predictions[0])
    confidence = predictions[0][predicted_idx] * 100
    predicted_class = classes[predicted_idx]
    
    # Top 3 pr√©dictions
    top_3_idx = np.argsort(predictions[0])[-3:][::-1]
    top_3 = [(classes[i], predictions[0][i] * 100) for i in top_3_idx]
    
    return predicted_class, confidence, top_3


def get_true_label_from_path(img_path):
    """Extrait le label r√©el depuis le chemin de l'image"""
    # Chemin typique : ./images/apple_healthy/image1.jpg
    parent = Path(img_path).parent.name
    return parent


def test_on_folder(model, metadata, images_folder, max_images=50, per_class=None):
    """Test le mod√®le sur un dossier d'images
    
    Args:
        model: Mod√®le entra√Æn√©
        metadata: M√©tadonn√©es du mod√®le
        images_folder: Dossier contenant les images
        max_images: Nombre total maximum d'images √† tester
        per_class: Nombre maximum d'images par classe (None = illimit√©)
    """
    
    images_path = Path(images_folder)
    
    if not images_path.exists():
        print(f"‚ùå Le dossier '{images_folder}' n'existe pas")
        return
    
    # R√©cup√©rer toutes les images
    all_images = []
    
    # Parcourir les sous-dossiers (classes)
    for class_folder in images_path.iterdir():
        if not class_folder.is_dir():
            continue
        
        # R√©cup√©rer toutes les images de la classe
        class_images = list(class_folder.glob('*.[jJ][pP][gG]')) + \
                      list(class_folder.glob('*.[jJ][pP][eE][gG]')) + \
                      list(class_folder.glob('*.[pP][nN][gG]'))
        
        # Limiter par classe si sp√©cifi√©
        if per_class is not None:
            class_images = class_images[:per_class]
        
        all_images.extend(class_images)
    
    # Limiter le nombre total d'images
    all_images = all_images[:max_images]
    
    if not all_images:
        print(f"‚ùå Aucune image trouv√©e dans '{images_folder}'")
        return
    
    print(f"\nüìä Test sur {len(all_images)} images...")
    print("=" * 80)
    
    # Statistiques
    correct = 0
    total = 0
    results = []
    
    # Tester chaque image
    for img_path in all_images:
        try:
            true_label = get_true_label_from_path(img_path)
            predicted_class, confidence, top_3 = predict_image(model, metadata, img_path)
            
            is_correct = (predicted_class == true_label)
            
            if is_correct:
                correct += 1
                status = "‚úÖ"
            else:
                status = "‚ùå"
            
            total += 1
            
            result = {
                'image': img_path.name,
                'true_label': true_label,
                'predicted': predicted_class,
                'confidence': confidence,
                'correct': is_correct,
                'top_3': top_3
            }
            results.append(result)
            
            # Affichage ligne par ligne
            print(f"{status} {total:3d}. {img_path.name:30s} | "
                  f"True: {true_label:20s} | "
                  f"Pred: {predicted_class:20s} | "
                  f"Conf: {confidence:5.1f}%")
        
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur avec {img_path.name}: {e}")
    
    # R√©sultats finaux
    accuracy = (correct / total * 100) if total > 0 else 0
    
    print("=" * 80)
    print(f"\nüìä R√âSULTATS GLOBAUX")
    print("=" * 80)
    print(f"   Total images test√©es : {total}")
    print(f"   Pr√©dictions correctes : {correct}")
    print(f"   Pr√©dictions incorrectes : {total - correct}")
    print(f"   Accuracy : {accuracy:.2f}%")
    
    # Objectif du projet
    if accuracy >= 90:
        print(f"\n   üéâ Objectif atteint ! (>= 90%)")
    else:
        print(f"\n   ‚ö†Ô∏è  Objectif non atteint (< 90%)")
    
    # Afficher les erreurs
    errors = [r for r in results if not r['correct']]
    
    if errors:
        print(f"\n‚ùå ERREURS DE PR√âDICTION ({len(errors)} erreurs)")
        print("=" * 80)
        
        for i, err in enumerate(errors[:10], 1):  # Limiter √† 10 erreurs
            print(f"\n{i}. {err['image']}")
            print(f"   Vrai label    : {err['true_label']}")
            print(f"   Pr√©dit        : {err['predicted']} ({err['confidence']:.1f}%)")
            print(f"   Top 3 pr√©dictions :")
            for cls, conf in err['top_3']:
                print(f"      - {cls:25s} : {conf:5.1f}%")
    
    # Matrice de confusion simplifi√©e
    print(f"\nüìä DISTRIBUTION PAR CLASSE")
    print("=" * 80)
    
    # Grouper par classe
    class_stats = {}
    for r in results:
        true_label = r['true_label']
        if true_label not in class_stats:
            class_stats[true_label] = {'total': 0, 'correct': 0}
        
        class_stats[true_label]['total'] += 1
        if r['correct']:
            class_stats[true_label]['correct'] += 1
    
    # Afficher
    for cls in sorted(class_stats.keys()):
        stats = class_stats[cls]
        cls_accuracy = (stats['correct'] / stats['total'] * 100) if stats['total'] > 0 else 0
        print(f"   {cls:25s} : {stats['correct']:2d}/{stats['total']:2d} ({cls_accuracy:5.1f}%)")
    
    print("=" * 80)
    
    return accuracy, results


def main():
    if len(sys.argv) < 3:
        print("Usage: python test_predict.py <model.zip> <images_folder> [max_images] [per_class]")
        print("\nExemples:")
        print("  python test_predict.py images_model.zip ./images/")
        print("  python test_predict.py images_model.zip ./images/ 100")
        print("  python test_predict.py images_model.zip ./images/ 1000 200")
        print("  python test_predict.py images_model.zip ./images/ 1000 all")
        print("\nArguments:")
        print("  max_images  : Nombre total maximum d'images (d√©faut: 50)")
        print("  per_class   : Images par classe (d√©faut: 10, 'all' = illimit√©)")
        print("\nCe script teste le mod√®le sur plusieurs images automatiquement")
        sys.exit(1)
    
    model_zip = sys.argv[1]
    images_folder = sys.argv[2]
    max_images = int(sys.argv[3]) if len(sys.argv) > 3 else 50
    
    # Gestion du param√®tre per_class
    if len(sys.argv) > 4:
        if sys.argv[4].lower() == 'all':
            per_class = None  # Pas de limite par classe
        else:
            per_class = int(sys.argv[4])
    else:
        per_class = 10  # Par d√©faut: 10 images par classe
    
    # V√©rifications
    if not Path(model_zip).exists():
        print(f"‚ùå Erreur: Le fichier '{model_zip}' n'existe pas")
        sys.exit(1)
    
    if not Path(images_folder).exists():
        print(f"‚ùå Erreur: Le dossier '{images_folder}' n'existe pas")
        sys.exit(1)
    
    print("=" * 80)
    print("üß™ TEST AUTOMATIQUE DE PREDICT.PY")
    print("=" * 80)
    print(f"   Max images total : {max_images}")
    print(f"   Max par classe   : {'Illimit√©' if per_class is None else per_class}")
    
    # Timer
    start_time = time.time()
    
    # 1. Extraction du mod√®le
    print(f"\nüì¶ Extraction du mod√®le depuis {model_zip}...")
    model_dir = extract_model(model_zip)
    
    # 2. Chargement
    print("üß† Chargement du mod√®le...")
    model, metadata = load_model_and_metadata(model_dir)
    
    print(f"   Classes : {len(metadata['classes'])}")
    print(f"   Accuracy training : {metadata['final_train_accuracy']*100:.2f}%")
    print(f"   Accuracy validation : {metadata['final_val_accuracy']*100:.2f}%")
    
    # 3. Test sur les images
    accuracy, results = test_on_folder(model, metadata, images_folder, max_images, per_class)
    
    # 4. Temps d'ex√©cution
    elapsed = time.time() - start_time
    print(f"\n‚è±Ô∏è  Temps d'ex√©cution : {elapsed:.2f} secondes")
    print(f"   Temps moyen par image : {elapsed/len(results):.3f}s")
    
    # 5. Nettoyage
    shutil.rmtree(model_dir)
    
    print("\n‚úÖ Test termin√© !\n")


if __name__ == "__main__":
    main()